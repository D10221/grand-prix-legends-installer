#!/usr/bin/env bash
#
# Grand Prix Legends installer
# Works on:
#  - Ubuntu
#  - Maybe Debian/Ubuntu derivatives
#  - Partially on MACOS
# Tested on:
#  - Ubuntu 20.4
# Requires:
#  - bash
#  - wget
#  - wine
#  - md5sum|shasum
#  - udisksctl
#  - file
#  - grep
# Downloads:
#  - GrandPrixLegends.iso from archive.org
#  - gplinstall_beta_1.08.exe from  grandprixlegends.info
# Description:
#  - Creates wine prefix, mounts iso and runs the installer
#

# this script version
VERSION=0.0.1

GPL_HOME=$HOME/.local/share/grand-prix-legends
CACHE="$HOME/.cache/grand-prix-legends"
ISO_URL="https://archive.org/download/grand-prix-legends/GrandPrixLegends.iso"
ISO=$CACHE/grand-prix-legends.iso
ISO_MD5="c42ff47a96633e28a6d03afa078b1da2  $ISO"
ISO_SHASUM="082542e01a9e63c914a8f34f77ee306531a2aa13  $ISO"
ISO_NAME="$(basename $ISO)"
# Global mounting point, to use by 'mount' , NOT by 'udisksctl'
ISO_MOUNTING_POINT="/mnt/$ISO_NAME"
INSTALLER_URL="http://gem.grandprixlegends.info/gplinstall_beta_1.08.exe"
INSTALLER="$CACHE/gplinstall_beta_1.08.exe"
INSTALLER_MD5="dd5b2a23b224dcf553ff7bac9082b045  $INSTALLER"
INSTALLER_SHASUM="5223d8e8c577ec4504fc8c9491b03c61710af263  $INSTALLER"
INSTALLER_LOG="$HOME/$(basename $INSTALLER).log"
GEM_URL="http://gem.grandprixlegends.info/GEM/GEMPackage_2.5.0.32.exe"
GEM="$CACHE/GEMPackage_2.5.0.32.exe"
GEM_MD5="d82cd2428ce28081a4dca6f3e395e95a  $GEM"
GEM_SHASUM="e8ce456a6db5c2440cb0501accc553730e2ed321  $GEM"
GEM_LOG="$HOME/$(basename $GEM).log"
WINEPREFIX="$GPL_HOME/pfx"
ISO_DEVICE="/dev/disk/by-label/GPL"
WINE="$(which wine)"
_filename=$(basename $0)
# use find?
GPL_EXE="$WINEPREFIX/drive_c/Sierra/GPL/gpl.exe"
GEM_EXE="$WINEPREFIX/drive_c/GPLSecrets/GEM+/GEMP2.exe"
# windows subs for linux
WSL=0
if [ ! -z "$WSL_DISTRO_NAME" ] || [[ $(uname -r) =~ "-microsoft-" ]]; then
    WSL=1
fi
# do mount iso unless '--nomount'
MOUNT=1
#
# error echoes to stderr
#
error() {
    echo -e "\e[31m$_filename: $@\e[0m" >&2
}
#
# debug
#
debug() {
    echo -e "\e[33m$_filename/${FUNCNAME[1]}: $@\e[0m"
}
#
# info
#
info() {
    echo -e "\e[36m$_filename/${FUNCNAME[1]}: $@\e[0m"
}
#
# SUDO
#
Sudo() {
    if ! [[ "$EUID" -eq 0 ]]; then
        echo 'sudo'
    else
        echo ''
    fi
}
#
#
# args:
#   $1  'file'
#   $2  'url'
#
download() {
    if [ ! -f "$1" ]; then
        mkdir -p "$(dirname $1)"
        return $(wget $2 -O "$1")
    fi
    return 0
}
#
# Args:
#   $1  'file'
#   $2  'md5sum'
#   $3  'shasum'
#
verify() {
    local actual=""
    if [ ! -z "$(which shasum)" ]; then
        actual="$(shasum $1)"
        expected=$3
    elif [ ! -z "$(which md5sum)" ]; then
        actual="$(md5sum $1)"
        expected=$2
    else
        error "Can't verify $1"
        return 1
    fi
    if [ "$actual" != "$expected" ]; then
        # debug "Expected $expected"
        # debug "Actual   $actual"
        error "Bad hash: $(basename $1)"
        return 1
    fi
    return 0
}
#
# Args:
#   $1 $ISO_DEVICE
#
userMountBackingFile() {
    local USER_MOUNT_BACKING_FILE=""
    local UDISKSCTL_INFO=$(udisksctl info -b "$1" | grep BackingFile)
    local r="\s+BackingFile:\s+(.*)"
    if [[ "$UDISKSCTL_INFO" =~ $r ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        return 1
    fi
}
UNMOUNT=0
#
# ???
#
userMount() {
    # get the device backing file
    USER_MOUNT_BACKING_FILE="$(udisksctlInfoBackingFile $ISO_DEVICE)"
    # already mounted?
    if [ -f "$USER_MOUNT_BACKING_FILE" ] && [ $USER_MOUNT_BACKING_FILE == $ISO ]; then
        return 0
    elif udisksctl loop-setup -f $ISO; then
        # mounted: update the backing file
        USER_MOUNT_BACKING_FILE="$(udisksctlInfoBackingFile $ISO_DEVICE)"
        UNMOUNT=1
    else
        return 1 # failed
    fi
}
#
# unmount user mounted ISO
#
userUnmount() {
    if [[ $UNMOUNT -eq 1 ]] && [ -f "$USER_MOUNT_BACKING_FILE" ] && [ $USER_MOUNT_BACKING_FILE == $ISO ]; then
        return udisksctl unmount -b $ISO_DEVICE
    fi
    return 1
}
#
# mount ISO , needs root
#
Mount() {
    # if not mounted
    local SUDO=$(Sudo)
    if [ -z "$(mount | grep $ISO_NAME)"]; then
        info "Mounting '$ISO_NAME' into '$ISO_MOUNTING_POINT'"
        if ! $SUDO mkdir -p "$ISO_MOUNTING_POINT"; then
            return 1 # failed
        fi
        if [[ $WSL -eq 1 ]]; then
            # WSL
            if [ -z "$DRIVE" ]; then
                error "wsl drive required, relaunch with --nomount OR --wsldrive='<drive>', see --help for more"
                return 1 # failed
            fi
            if ! [[ "$DRIVE" =~ ^[a-zA-Z]$ ]]; then
                error "'$DRIVE' is not a valid drive letter"
                return 1 # failed
            fi
            if $SUDO mount -t drvfs "$DRIVE:" "$ISO_MOUNTING_POINT"; then
                UNMOUNT=1 # flag unmount
            else
                return 1 # failed
            fi
        else
            #linux
            if $SUDO mount -o ro,loop "$ISO" "$ISO_MOUNTING_POINT"; then
                UNMOUNT=1 # flag unmount
            else
                return 1 # failed
            fi
        fi
    else
        return 0 # mounted
    fi
}
#
# unmount ISO_MOUNTING_POINT , needs root
#
Unmount() {
    if [[ $UNMOUNT -eq 1 ]]; then
        local SUDO="$(Sudo)"
        if $SUDO umount "$ISO_MOUNTING_POINT"; then
            debug "Unmounted $ISO"
        else
            error "'$SUDO umount $ISO_MOUNTING_POINT' failed"
            return 1 # fail
        fi
    fi
}
#
#
#
tryMount() {
    if [[ $MOUNT -eq 1 ]]; then
        if userMount; then # user mounted
            mounted=1
            debug "$ISO_NAME 'Mounted' by udisksctl"
            return 0
        elif Mount; then # system mounted
            mounted=1
            debug "$ISO_NAME 'Mounted' by 'mount'"
            return 0
        else
            msg="Unable to mount '$ISO_NAME'\n"
            msg+=" You will need to mount '$ISO'\n"
            msg+=" Or load the Disc your self.\n"
            msg+=" Relaunch with '--nomount' option to skip this error"
            error "$msg"
            return 1
        fi
    fi
}
#
#
#
tryUnmount() {
    if [[ $UNMOUNT -eq 1 ]]; then
        debug "unmounting $ISO_NAME"
        if userUnmount; then
            debug "unmounted $ISO_NAME by 'udisksctl'"
        else
            if Unmount; then
                debug "$ISO_NAME 'unmounted' by 'unmount'"
            else
                error "Failed to unmount $ISO"
            fi
        fi
    fi
}
#
# install on linux
#
linuxInstall() {
    # create dirs to store downloaded files and prefix
    if ! download $ISO $ISO_URL ||
        ! download $INSTALLER $INSTALLER_URL ||
        ! download $GEM $GEM_URL; then
        error "Download failed"
        return 1
    fi
    # verify
    if ! verify $ISO "$ISO_MD5" "$ISO_SHASUM" ||
        ! verify $INSTALLER "$INSTALLER_MD5" "$INSTALLER_SHASUM" ||
        ! verify $GEM "$GEM_MD5" "$GEM_SHASUM"; then
        debug "verify failed"
        return 1
    fi
    # if there isn't wine ?
    if [ ! -f "$WINE" ]; then
        error "can't find wine, get wine on the \$PATH and try again"
        return 1
    fi
    # tryMount
    local mounted=0
    if tryMount; then
        mounted=1
    fi
    # installing GPL
    local GPL_INSTALLED=0
    if [[ $mounted -eq 1 ]]; then
        if [ -f $GPL_EXE ]; then
            debug "$(basename $GPL_EXE) installed at $(dirname $GPL_EXE)"
            GPL_INSTALLED=1
        fi
        if [[ $GPL_INSTALLED -eq 0 ]]; then
            debug "Installing GPL"
            if mkdir -p "$WINEPREFIX" && WINEPREFIX="$WINEPREFIX" wine "$INSTALLER" &>>"$INSTALLER_LOG"; then
                GPL_INSTALLED=1
                debug "installed GPL"
            else
                debug "Failed to install GPL"
            fi
        fi
    else
        debug "Can't install GPL"
    fi
    # installing GEM
    local GEM_INSTALLED=0
    if [ -f $GEM_EXE ]; then
        debug "$(basename $GEM) installed at $(dirname $GEM)"
        GEM_INSTALLED=1
    fi
    if [[ $GPL_INSTALLED -eq 1 ]] && [[ "$GEM_INSTALLED" -eq 0 ]]; then
        debug "installing GEM"
        if mkdir -p "$WINEPREFIX" && WINEPREFIX="$WINEPREFIX" wine "$GEM" &>>"$GEM_LOG"; then
            debug "installed GEM?"
        else
            debug "failed to install GEM"
        fi
    else
        error "Can't install GEM"
    fi
    # tryUnmount
    tryUnmount
}
#
#
#
darwinInstall() {
    #
    if ! download $ISO $ISO_URL ||
        ! download $INSTALLER $INSTALLER_URL ||
        ! download $GEM $GEM_URL; then
        error "Download failed"
        return 1
    fi
    # verify downloaded files
    if ! verify $ISO "$ISO_MD5" "$ISO_SHASUM" ||
        ! verify $INSTALLER "$INSTALLER_MD5" "$INSTALLER_SHASUM" ||
        ! verify $GEM "$GEM_MD5" "$GEM_SHASUM"; then
        debug verify failed
        return 1
    fi
    # if there isn't wine ?
    if [ ! -f "$WINE" ]; then
        error "can't find wine, get wine on the \$PATH and try again"
        return 1
    fi
    # Mounting the iso
    mounted=1
    if hdiutil mount $ISO; then
        UNMOUNT=1
        mounted=0
    fi
    if ! $mounted; then
        error "TODO: Can't mount $ISO_NAME, is it mounted already?"
    fi
    debug "TODO: You may not find the CD as a wine drive, sorry"
    # run
    installGPL
    # unmount iso
    if $mounted; then
        error "TODO: Can't unmount $ISO_NAME"
        return 1
    fi
}
#
# ???
#
mainInstall() {
    case $OSTYPE in
    linux*)
        if ! linuxInstall; then
            error "Installation did not complete successfully"
            return 1
        fi
        ;;
    darwin*)
        if ! darwinInstall; then
            error "Installation did not complete successfully"
            return 1
        fi
        ;;
    *)
        error "Installation for OS '$OSTYPE' is not implemented."
        return 1
        ;;
    esac
}
#
# Uninstall GPL and remove prefix
#
uninstall() {
    if $YES; then
        if rm -rf $GPL_HOME; then
            return 0
        else
            return 1
        fi
    fi
    read -p "Uninstall GPL and remove prefix (y/n)? " u
    case $u in
    y)
        if rm -rf $GPL_HOME; then
            return 0
        else
            return 1
        fi
        ;;
    n)
        error "Uninstall cancelled."
        ;;
    *)
        error "Unknown option '$u', Uninstall cancelled."
        return 1
        ;;
    esac
}
#
# Args:
#   $1  'option' ex, 'x=1'
# Returns:
#   $2  'value'
#
optionValue(){
    local r="\w+=(.*)"
    if [[ "$1" =~ $r ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        return 1
    fi
}
#
# usage
#
usage() {
    echo "Grand Prix Legends Wine Installer v$VERSION"
    echo "usage: '$_filename [verb] [options]'"
    echo "verbs: "
    echo "  install        'run GPL installers'"
    echo "  uninstall      'remove GPL and Wine Prefix'"
    echo "options:"
    echo "  -h --help      'Show this'"
    echo "  -v --version   'Show '$_filename' version'"
    echo "  --nomount      'Do not try to mount ISO'"
    echo "  --wsldrive='<drive>'"
    echo "      desc:   'drive letter to mount in wsl environment'"
    echo "              'required on WSL'"
    echo "      <drive>: [az-AZ]"
    echo "      example '--wsldrive=d'"
}
#
if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi
#
# Exec Opts
#
option() {
    case $1 in
    help)
        OPTKEY='h'
        usage
        exit
        ;;
    version)
        OPTKEY='v'
        debug v$VERSION
        exit
        ;;
    nomount)
        MOUNT=0
        ;;
    wsldrive)
        DRIVE="$2"
        echo DRIVE="$2"
        ;;
    *)
        error "Invalid option '$1'"
        exit 1
        ;;
    esac
}
# parse opts
while getopts ":hvu-:" o; do
    case "${o}" in
    -)
        case "${OPTARG}" in
        help)
            option 'help' "$OPTARG"
            ;;
        version)
            option 'version' "$OPTARG"
            ;;
        nomount)
            shift
            option 'nomount' "$OPTARG"
            ;;
        wsldrive=*)
            shift            
            option 'wsldrive' "$(optionValue $OPTARG)"
            ;;
        *)
            error "Unknown option --${OPTARG}"
            exit 1
            ;;
        esac
        ;;
    h)
        option "help" "$OPTARG"
        ;;
    v)
        option "version" "$OPTARG"
        ;;
    *)
        if [ "$OPTERR" != 1 ] || [ "${OPTSPEC:0:1}" = ":" ]; then
            error "Non-option argument: '-${OPTARG}'"
        fi
        error "Unknown option -${OPTARG}"
        exit 1
        ;;
    esac
done
# launch verbs
case $1 in
install)
    if mainInstall; then
        debug "done"
    else
        error "done with error"
    fi
    ;;
uninstall)
    uninstall
    ;;
*)
    error "Unkown verb '$1'"
    exit 1
    ;;

esac
