#!/usr/bin/env bash
#
# Grand Prix Legends installer
# Works on:
#  - Ubuntu
#  - Maybe Debian/Ubuntu derivatives
#  - Partially on MACOS
# Tested on:
#  - Ubuntu 20.4
# Requires:
#  - bash
#  - wget
#  - wine
#  - md5sum|shasum
#  - udisksctl
#  - file
#  - grep
# Downloads:
#  - GrandPrixLegends.iso from archive.org
#  - gplinstall_beta_1.08.exe from  grandprixlegends.info
# Description:
#  - Creates wine prefix, mounts iso and runs the installer
#

# this script version
VERSION=0.0.1

GPL_HOME=$HOME/.local/share/grand-prix-legends
CACHE="$HOME/.cache/grand-prix-legends"
ISO_URL="https://archive.org/download/grand-prix-legends/GrandPrixLegends.iso"
ISO=$CACHE/grand-prix-legends.iso
ISO_MD5="c42ff47a96633e28a6d03afa078b1da2  $ISO"
ISO_SHASUM="082542e01a9e63c914a8f34f77ee306531a2aa13  $ISO"
ISO_NAME="$(basename $ISO)"
# Global mounting point, to use by 'mount' , NOT by 'udisksctl'
ISO_MOUNTING_POINT="/mnt/$ISO_NAME"
INSTALLER_URL="http://gem.grandprixlegends.info/gplinstall_beta_1.08.exe"
INSTALLER="$CACHE/gplinstall_beta_1.08.exe"
INSTALLER_MD5="dd5b2a23b224dcf553ff7bac9082b045  $INSTALLER"
INSTALLER_SHASUM="5223d8e8c577ec4504fc8c9491b03c61710af263  $INSTALLER"
INSTALLER_LOG="$HOME/$(basename $INSTALLER).log"
GEM_URL="http://gem.grandprixlegends.info/GEM/GEMPackage_2.5.0.32.exe"
GEM="$CACHE/GEMPackage_2.5.0.32.exe"
GEM_MD5="d82cd2428ce28081a4dca6f3e395e95a  $GEM"
GEM_SHASUM="e8ce456a6db5c2440cb0501accc553730e2ed321  $GEM"
GEM_LOG="$HOME/$(basename $GEM).log"
WINEPREFIX="$GPL_HOME/pfx"
ISO_DEVICE="/dev/disk/by-label/GPL"
WINE="$(which wine)"
_filename=$(basename $0)
# use find?
GPL_EXE="$WINEPREFIX/drive_c/Sierra/GPL/gpl.exe"
GEM_EXE="$WINEPREFIX/drive_c/GPLSecrets/GEM+/GEMP2.exe"
# windows subs for linux
WSL=0
if [ ! -z "$WSL_DISTRO_NAME" ] || [[ $(uname -r) =~ "-microsoft-" ]]; then
    WSL=1
fi
#
# error: echo to stderr
#
error() {
    echo -e "\e[31m$_filename: $@\e[0m"
}
#
# Debug: echo to sdtout
#
debug() {
    echo -e "\e[33m$_filename/${FUNCNAME[1]}: $@\e[0m"
}
#
#
# args:
#   $1  'file'
#   $2  'url'
#
download() {
    if [ ! -f "$1" ]; then
        mkdir -p "$(dirname $1)"
        return $(wget $2 -O "$1")
    fi
    return 0
}
#
# Args:
#   $1  'file'
#   $2  'md5sum'
#   $3  'shasum'
#
verify() {
    local actual=""
    if [ ! -z "$(which shasum)" ]; then
        actual="$(shasum $1)"
        expected=$3
    elif [ ! -z "$(which md5sum)" ]; then
        actual="$(md5sum $1)"
        expected=$2
    else
        error "Can't verify $1"
        return 1
    fi
    if [ "$actual" != "$expected" ]; then
        # debug "Expected $expected"
        # debug "Actual   $actual"
        error "Bad hash: $(basename $1)"
        return 1
    fi
    return 0
}
#
# Args:
#   $1 $ISO_DEVICE
#
udisksctlInfoBackingFile() {
    local BACKINGFILE=""
    local UDISKSCTL_INFO=$(udisksctl info -b "$1" | grep BackingFile)
    local r="\s+BackingFile:\s+(.*)"
    if [[ "$UDISKSCTL_INFO" =~ $r ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        return 1
    fi
}
#
# ???
#
udisksctlMount() {
    # get the device backing file
    BACKINGFILE="$(udisksctlInfoBackingFile $ISO_DEVICE)"
    # already mounted?
    if [ -f "$BACKINGFILE" ] && [ $BACKINGFILE == $ISO ]; then # is mounted
        debug "$ISO_NAME Already mounted"
        return 2
    elif udisksctl loop-setup -f $ISO; then # mount it
        # mounted: update the backing file
        BACKINGFILE="$(udisksctlInfoBackingFile $ISO_DEVICE)"
    fi
    #
    if ! [ -f "$BACKINGFILE" ]; then
        error "failed to mount '$ISO' on '$ISO_DEVICE' device!"
        return 1 # not mounted
    fi
    #
    if [ $BACKINGFILE != $ISO ]; then
        error "Wrong '$ISO' on '$ISO_DEVICE' device?"
        return 1 # not mounted
    fi
}
#
# unmount $ISO if not mounted
#
# returns:
#   2: not mounted
#   1: failed to unmount
#
udisksctlUnmount() {
    # if BACKINGFILE is set, is mounted by udisksctl
    if [ ! -f "$BACKINGFILE" ] || [ $BACKINGFILE != $ISO ]; then
        debug BACKINGFILE=$BACKINGFILE
        return 2 # not mounted by udisksctl
    fi
    if ! udisksctl unmount -b $ISO_DEVICE; then
        return 1 # failed to unmount
    fi
}
#
# mount ISO , needs root
#
rootMount() {
    # if not mounted
    if [ -z "$(mount | grep $ISO_NAME)"]; then
        SUDO=''
        if (($EUID != 0)); then
            SUDO='sudo'
        fi
        if ! [ -z $SUDO ]; then
            debug "need root access to mount '$ISO_NAME'"
        fi
        if ! $SUDO mkdir -p "$ISO_MOUNTING_POINT"; then
            return 1
        fi
        if [[ $WSL -eq 1 ]]; then
            # WSL
            read -p 'Please enter Drive letter [az-AZ]: ' DRIVE
            if ! [[ "$DRIVE" =~ ^[a-zA-Z]$ ]]; then
                error "'$DRIVE' is not a valid drive letter"
                return 1
            fi
            if ! $SUDO mount -t drvfs "$DRIVE:" "$ISO_MOUNTING_POINT"; then
                return 1
            fi
        else
            #linux
            if ! $SUDO mount -o ro,loop "$ISO" "$ISO_MOUNTING_POINT"; then
                return 1 # mounted
            fi
        fi
    else
        error "'$ISO_NAME' seems to be mounted already"
        return 2
    fi
}
#
# unmount ISO_MOUNTING_POINT , needs root
#
rootUnmount() {
    SUDO=''
    if (($EUID != 0)); then
        SUDO='sudo'
    fi
    if ! [ -z "$(mount | grep $ISO_NAME)"]; then # if mounted
        if ! $SUDO unmount $ISO_MOUNTING_POINT; then
            error "$SUDO unmount $ISO_MOUNTING_POINT failed"
            return 1 # fail
        fi
    else
        return 2 #not mounted by $SUDO mount
    fi
}
#
# install on linux
#
linuxInstall() {
    # create dirs to store downloaded files and prefix
    if ! download $ISO $ISO_URL ||
        ! download $INSTALLER $INSTALLER_URL ||
        ! download $GEM $GEM_URL; then
        error "Download failed"
        return 1
    fi
    # verify
    if ! verify $ISO "$ISO_MD5" "$ISO_SHASUM" ||
        ! verify $INSTALLER "$INSTALLER_MD5" "$INSTALLER_SHASUM" ||
        ! verify $GEM "$GEM_MD5" "$GEM_SHASUM"; then
        debug "verify failed"
        return 1
    fi
    # if there isn't wine ?
    if [ ! -f "$WINE" ]; then
        error "can't find wine, get wine on the \$PATH and try again"
        return 1
    fi
    # Mounting the iso
    local mounted=0
    if udisksctlMount; then
        mounted=1
        debug "$ISO_NAME 'Mounted' by udisksctl"
    else
        case "$?" in
        1)
            # error
            mounted=0
            debug "$ISO_NAME 'Not Mounted' by udisksctl"
            ;;
        2)
            # error: already mounted
            mounted=2
            debug "$ISO_NAME 'Already Mounted' by udisksctl"
            ;;
        *)
            error "'Unnkown' error by udisksctl"
            ;;
        esac
    fi
    # Couldn't mount in user space, try with 'mount'
    if [[ $mounted -eq 0 ]]; then
        if rootMount; then
            mounted=1
            debug "$ISO_NAME 'Mounted' by 'mount'"
        else
            case "$?" in
            1)
                # error
                mounted=0
                debug "$ISO_NAME 'Not Mounted' by 'mount'"
                ;;
            2)
                # error: already mounted
                mounted=2
                debug "$ISO_NAME 'Already Mounted' by 'mount'"
                ;;
            *)
                debug "'Unkown' error by 'mount'"
                ;;
            esac
        fi
    fi
    #
    if [[ $mounted -eq 0 ]]; then
        echo "Unable to mount '$ISO_NAME'"
        echo "You will need to mount '$ISO'"
        echo "Or load the Disc your self"
        read -p "Run the installer anyway? (y/n)" a
        case $a in
        y) mounted=3 ;; # maybe mounted
        esac
    fi
    # installing GPL
    if [[ $mounted -gt 0 ]]; then
        local GPL_INSTALLED=0
        if [ -f $GPL_EXE ]; then
            debug "$(basename $GPL_EXE) already installed at $(dirname $GPL_EXE)"
            GPL_INSTALLED=1
        fi
        if [[ $GPL_INSTALLED -eq 0 ]]; then
            debug "Installing GPL"
            if mkdir -p "$WINEPREFIX" && WINEPREFIX="$WINEPREFIX" wine "$INSTALLER" &>>"$INSTALLER_LOG"; then
                debug "installed GPL?"
            else
                debug "Failed to install GPL"
            fi
        fi
        # installing GEM
        local GEM_INSTALLED=0
        if [ -f $GEM_EXE ]; then
            debug "$(basename $GEM) already installed at $(dirname $GEM)"
            GEM_INSTALLED=1
        fi
        if [[ "$GEM_INSTALLED" -eq 0 ]]; then
            debug "installing GEM"
            if mkdir -p "$WINEPREFIX" && WINEPREFIX="$WINEPREFIX" wine "$GEM" &>>"$GEM_LOG"; then
                debug "installed GEM?"
            else
                debug "failed to install GEM"
            fi
        fi
    else
        debug "Not ready to install GPL"
    fi
    # if mounted here
    if [[ mounted -eq 1 ]]; then
        debug "unmounting $ISO_NAME"
        if udisksctlUnmount; then
            debug "unmounted $ISO_NAME by 'udisksctl'"
        else
            case "$?" in
            2)
                debug "$ISO_NAME not 'unmounted' by 'udisksctl'"
                if rootUnmount; then
                    debug "$ISO_NAME 'unmounted' by 'unmount'"
                else
                    case "$?" in
                    1) debug "$ISO_NAME failed to unmount by 'unmount'" ;;
                    2) debug "$ISO_NAME was 'not mounted' by 'unmount'" ;;
                    *) debug "unkown error unmounting $ISO_NAME by 'unmount'" ;;
                    esac
                fi
                ;;
            1) debug "$ISO_NAME failed to 'unmount' by 'udisksctl'" ;;
            *) debug "unkown error unmounting $ISO_NAME by 'udisksctl'" ;;
            esac
        fi
    elif [[ mounted -eq 2 ]]; then
        debug "not unmounting $ISO_NAME, 'Already mounted'"
    else
        debug "not unmounting $ISO_NAME, 'Not Mounted'"
    fi
}
#
#
#
darwinInstall() {
    #
    if ! download $ISO $ISO_URL ||
        ! download $INSTALLER $INSTALLER_URL ||
        ! download $GEM $GEM_URL; then
        error "Download failed"
        return 1
    fi
    # verify downloaded files
    if ! verify $ISO "$ISO_MD5" "$ISO_SHASUM" ||
        ! verify $INSTALLER "$INSTALLER_MD5" "$INSTALLER_SHASUM" ||
        ! verify $GEM "$GEM_MD5" "$GEM_SHASUM"; then
        debug verify failed
        return 1
    fi
    # if there isn't wine ?
    if [ ! -f "$WINE" ]; then
        error "can't find wine, get wine on the \$PATH and try again"
        return 1
    fi
    # Mounting the iso
    mounted=1
    if hdiutil mount $ISO; then
        mounted=0
    fi
    if ! $mounted; then
        error "TODO: Can't mount $ISO_NAME, is it mounted already?"
    fi
    debug "TODO: You may not find the CD as a wine drive, sorry"
    # run
    installGPL
    # unmount iso
    if $mounted; then
        error "TODO: Can't unmount $ISO_NAME"
        return 1
    fi
}
#
# ???
#
mainInstall() {
    case $OSTYPE in
    linux*)
        if ! linuxInstall; then
            error "Installation did not complete successfully"
            return 1
        fi
        ;;
    darwin*)
        if ! darwinInstall; then
            error "Installation did not complete successfully"
            return 1
        fi
        ;;
    *)
        error "Installation for OS '$OSTYPE' is not implemented."
        return 1
        ;;
    esac
}
#
# Uninstall GPL and remove prefix
#
uninstall() {
    if $YES; then
        if rm -rf $GPL_HOME; then
            return 0
        else
            return 1
        fi
    fi
    read -p "Uninstall GPL and remove prefix (y/n)? " u
    case $u in
    y)
        if rm -rf $GPL_HOME; then
            return 0
        else
            return 1
        fi
        ;;
    n)
        error "Uninstall cancelled."
        ;;
    *)
        error "Unknown option '$u', Uninstall cancelled."
        return 1
        ;;
    esac
}
#
# usage
#
usage() {
    debug "Grand Prix Legends Wine Installer v$VERSION"
    debug "usage: '$_filename [verb] [options]'"
    debug "verbs: "
    debug "  install        'run GPL installers'"
    debug "  uninstall      'remove GPL and Wine Prefix'"
    debug "options:"
    debug "  -h --help      'Show this'"
    debug "  -v --version   'Show '$_filename' version'"
}
#
if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi
#
#
#
option() {
    case $1 in
    h)
        OPTKEY='h'
        usage
        exit
        ;;
    v)
        OPTKEY='v'
        debug v$VERSION
        exit
        ;;
    *)
        error "Invalid option '$1'"
        exit 1
        ;;
    esac
}
while getopts ":hvu-:" o; do
    case "${o}" in
    -)
        case "${OPTARG}" in
        help)
            option 'h' "$OPTARG"
            ;;
        version)
            option 'v' "$OPTARG"
            ;;
        *)
            error "Unknown option --${OPTARG}"
            exit 1
            ;;
        esac
        ;;
    h)
        option "$o" "$OPTARG"
        ;;
    v)
        option "$o" "$OPTARG"
        ;;
    *)
        if [ "$OPTERR" != 1 ] || [ "${OPTSPEC:0:1}" = ":" ]; then
            error "Non-option argument: '-${OPTARG}'"
        fi
        error "Unknown option -${OPTARG}"
        exit 1
        ;;
    esac
done
case $1 in
install)
    if mainInstall; then
        debug "done"
    else
        error "done with error"
    fi
    ;;
uninstall)
    uninstall
    ;;
*)
    error "Unkown verb '$1'"
    exit 1
    ;;

esac
