#!/usr/bin/env bash
#
# Grand Prix Legends installer
# Works on:
#  - Ubuntu
#  - Maybe Debian/Ubuntu derivatives
#  - Partially on MACOS
# Tested on:
#  - Ubuntu 20.4
# Requires:
#  - bash
#  - wget
#  - wine
#  - md5sum|shasum
#  - udisksctl
#  - file
#  - grep
# Downloads:
#  - GrandPrixLegends.iso from archive.org
#  - gplinstall_beta_1.08.exe from  grandprixlegends.info
# Description:
#  - Creates wine prefix, mounts iso and runs the installer
#

# this script version
VERSION=0.0.1

GPL_HOME=$HOME/.local/share/grand-prix-legends
CACHE="$HOME/.cache/grand-prix-legends"
ISO_URL="https://archive.org/download/grand-prix-legends/GrandPrixLegends.iso"
ISO=$CACHE/grand-prix-legends.iso
ISO_MD5="c42ff47a96633e28a6d03afa078b1da2  $ISO"
ISO_SHASUM="082542e01a9e63c914a8f34f77ee306531a2aa13  $ISO"
# Global mounting point, to use by 'mount' , NOT by 'udisksctl'
ISO_MOUNTING_POINT="/mnt/$(basename $ISO)"
INSTALLER_URL="http://gem.grandprixlegends.info/gplinstall_beta_1.08.exe"
INSTALLER="$CACHE/gplinstall_beta_1.08.exe"
INSTALLER_MD5="dd5b2a23b224dcf553ff7bac9082b045  $INSTALLER"
INSTALLER_SHASUM="5223d8e8c577ec4504fc8c9491b03c61710af263  $INSTALLER"
GEM_URL="http://gem.grandprixlegends.info/GEM/GEMPackage_2.5.0.32.exe"
GEM="$CACHE/GEMPackage_2.5.0.32.exe"
GEM_MD5="d82cd2428ce28081a4dca6f3e395e95a  $GEM"
GEM_SHASUM="e8ce456a6db5c2440cb0501accc553730e2ed321  $GEM"
WINEPREFIX="$GPL_HOME/pfx"
ISO_DEVICE="/dev/disk/by-label/GPL"
WINE="$(which wine)"
_filename=$(basename $0)
# use find?
GPL_EXE="$WINEPREFIX/drive_c/Sierra/GPL/gpl.exe"
GEM_EXE="$WINEPREFIX/drive_c/GPLSecrets/GEM+/GEMP2.exe"
# windows subs for linux
WSL=0
if [ ! -z "$WSL_DISTRO_NAME" ] || [[ $(uname -r) =~ "-microsoft-" ]]; then
    WSL=1
fi
#
# args:
#   $1  'file'
#   $2  'url'
#
download() {
    if [ ! -f "$1" ]; then
        return $(wget $2 -O "$1")
    fi
    return 0
}
#
# Args:
#   $1  'file'
#   $2  'md5sum'
#   $3  'shasum'
#
verify() {
    local actual=""
    if [ ! -z "$(which shasum)" ]; then
        actual="$(shasum $1)"
        expected=$3
    elif [ ! -z "$(which md5sum)" ]; then
        actual="$(md5sum $1)"
        expected=$2
    else
        echo "$_filename: Can't verify $1" >&2
        return 1
    fi
    if [ "$actual" != "$expected" ]; then
        # echo "Expected $expected"
        # echo "Actual   $actual"
        echo "$_filename: Bad hash: $(basename $1)" >&2
        return 1
    fi
    return 0
}
# create targets
createTargets() {
    mkdir -p "$CACHE"
    mkdir -p "$WINEPREFIX"
}
#
# Args:
#   $1 $ISO_DEVICE
#
udisksctlInfoBackingFile() {
    local BACKINGFILE=""
    local UDISKSCTL_INFO=$(udisksctl info -b "$1" | grep BackingFile)
    local r="\s+BackingFile:\s+(.*)"
    if [[ "$UDISKSCTL_INFO" =~ $r ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        return 1
    fi
}
#
# ???
#
udisksctlMount() {
    # get the device backing file
    local BACKINGFILE="$(udisksctlInfoBackingFile $ISO_DEVICE)"
    # already mounted?
    if [ -f "$BACKINGFILE" ] && [ $BACKINGFILE == $ISO ]; then # is mounted
        echo "$_filename: Already mounted $ISO?" >&2
        return 1                            # return 'Not mounted'
    elif udisksctl loop-setup -f $ISO; then # mount it
        # mounted: update the backing file
        BACKINGFILE="$(udisksctlInfoBackingFile $ISO_DEVICE)"
    fi
    #
    if ! [ -f "$BACKINGFILE" ]; then
        echo "$_filename: Can't mount '$ISO' on '$ISO_DEVICE' device!" >&2
        return 1
    fi
    #
    if [ $BACKINGFILE != $ISO ]; then
        echo "$_filename: Wrong '$ISO' on '$ISO_DEVICE' device?" >&2
        return 1
    fi
}
#
# ???
#
udisksctlUnmount() {
    if [ -f "$BACKINGFILE" ] && [ $BACKINGFILE == $ISO ] && # is mounted
        ! udisksctl unmount -b $ISO_DEVICE; then
        return 1 # failed
    fi
}
#
# mount ISO , needs root
#
rootMount() {
    local bname=$(basename $ISO)
    if mkdir -p $ISO_MOUNTING_POINT; then
        if [[ $WSL -eq 1 ]]; then
            # TODO: find drive letter
            if mkdir -p $ISO_MOUNTING_POINT && mount -t drvfs D: "/mnt/$bname"; then
                return 0 # mounted
            fi
        else
            #linux
            if mount -o ro,loop "$ISO" "/mnt/$bname"; then
                return 0 # mounted
            fi
        fi
    fi
    return 1
}
rootUnmount() {
    echo "TODO: rootUnmount is not implemented" >&2
    return 1
}
#
# ???
#
wineInstall() {
    local GPL_INSTALLED=0
    if [ -f $GPL_EXE ]; then
        GPL_INSTALLED=1
    fi
    if [[ $GPL_INSTALLED -eq 0 ]] && WINEPREFIX="$WINEPREFIX" wine "$INSTALLER"; then
        echo "$GPL_EXE installed"
        GPL_INSTALLED=1
    fi
    GEM_INSTALLED=0
    if [ -f $GEM_EXE ]; then
        echo "$GEM installed"
        GEM_INSTALLED=1
    fi
    if [[ "$GEM_INSTALLED" -eq 0 ]] && [[ "$GPL_INSTALLED" -eq 0 ]]; then
        if WINEPREFIX="$WINEPREFIX" wine "$GEM"; then
            GEM_INSTALLED=1
        fi
    fi
    if [[ $GPL_INSTALLED -eq 1 ]] || [[ $GEM_INSTALLED -eq 1 ]]; then
        return 0
    else
        return 1
    fi
}
#
# install on linux
#
linuxInstall() {
    # create dirs to store downloaded files and prefix
    createTargets
    #
    if ! download $ISO $ISO_URL ||
        ! download $INSTALLER $INSTALLER_URL ||
        ! download $GEM $GEM_URL; then
        echo "$_filename: Download failed" >&2
        return 1
    fi
    # verify
    if ! verify $ISO "$ISO_MD5" "$ISO_SHASUM" ||
        ! verify $INSTALLER "$INSTALLER_MD5" "$INSTALLER_SHASUM" ||
        ! verify $GEM "$GEM_MD5" "$GEM_SHASUM"; then
        echo "$_filename: verify failed"
        return 1
    fi
    # if there isn't wine ?
    if [ ! -f "$WINE" ]; then
        echo "$_filename: can't find wine, get wine on the \$PATH and try again" >&2
        return 1
    fi
    # Mounting the iso
    local mounted=0
    if udisksctlMount; then
        mounted=1
    fi
    # Alt mount
    if [[ $mounted -eq 0 ]]; then
        echo "$_filename: Unable to mount '$(basename $ISO)'"
        read -p "Try mounting as super user? (y/n)" a
        case $a in
        y)
            if rootMount; then
                mounted=1
            fi
            ;;
        esac
    fi
    #
    local ready=0
    if [[ $mounted -eq 0 ]]; then
        echo "$_filename: Unable to mount '$(basename $ISO)'"
        echo "You will need to mount '$ISO'"
        echo "Or load the Disc your self"
        read -p "$_filename: Run the installer anyway? (y/n)" a
        case $a in
        y) ready=1 ;;
        esac
    fi
    # Run the installers
    if [[ $ready -eq 1 ]]; then
        wineInstall
    fi
    # unmount iso
    if [[ mounted -eq 1 ]]; then
        if ! udisksctlUnmount; then
            if ! rootUnmount; then
                echo "$_filename: Didn't unmount '$(basename $ISO)'"
            fi
        fi
    fi
}
#
#
#
darwinInstall() {
    # create dirs to store downloaded files and prefix
    createTargets
    #
    if ! download $ISO $ISO_URL ||
        ! download $INSTALLER $INSTALLER_URL ||
        ! download $GEM $GEM_URL; then
        echo "$_filename: Download failed" >&2
        return 1
    fi
    # verify downloaded files
    if ! verify $ISO "$ISO_MD5" "$ISO_SHASUM" ||
        ! verify $INSTALLER "$INSTALLER_MD5" "$INSTALLER_SHASUM" ||
        ! verify $GEM "$GEM_MD5" "$GEM_SHASUM"; then
        echo verify failed
        return 1
    fi
    # if there isn't wine ?
    if [ ! -f "$WINE" ]; then
        echo "$_filename: can't find wine, get wine on the \$PATH and try again" >&2
        return 1
    fi
    # Mounting the iso
    mounted=1
    if hdiutil mount $ISO; then
        mounted=0
    fi
    if ! $mounted; then
        echo "$_filename: TODO: Can't mount $(basename $ISO), is it mounted already?" >&2
    fi
    echo "$_filename: TODO: You may not find the CD as a wine drive, sorry"
    # run
    wineInstall
    # unmount iso
    if $mounted; then
        echo "$_filename: TODO: Can't unmount $(basename $ISO)" >&2
        return 1
    fi
}
#
# ???
#
mainInstall() {
    case $OSTYPE in
    linux*)
        if ! linuxInstall; then
            echo "$_filename: Installation did not complete successfully" >&2
            return 1
        fi
        ;;
    darwin*)
        if ! darwinInstall; then
            echo "$_filename: Installation did not complete successfully" >&2
            return 1
        fi
        ;;
    *)
        echo "$_filename: Installation for OS '$OSTYPE' is not implemented." >&2
        return 1
        ;;
    esac
}
#
# Uninstall GPL and remove prefix
#
uninstall() {
    if $YES; then
        if rm -rf $GPL_HOME; then
            return 0
        else
            return 1
        fi
    fi
    read -p "Uninstall GPL and remove prefix (y/n)? " u
    case $u in
    y)
        if rm -rf $GPL_HOME; then
            return 0
        else
            return 1
        fi
        ;;
    n)
        echo "Uninstall cancelled." >&2
        ;;
    *)
        echo "Unknown option '$u', Uninstall cancelled." >&2
        return 1
        ;;
    esac
}
#
# usage
#
usage() {
    echo "Grand Prix Legends Wine Installer v$VERSION"
    echo "usage: '$_filename [verb] [options]'"
    echo "verbs: "
    echo "  install        'run GPL installers'"
    echo "  uninstall      'remove GPL and Wine Prefix'"
    echo "options:"
    echo "  -h --help      'Show this'"
    echo "  -v --version   'Show '$_filename' version'"
}
#
if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi
#
#
#
option() {
    case $1 in
    h)
        OPTKEY='h'
        usage
        exit
        ;;
    v)
        OPTKEY='v'
        echo v$VERSION
        exit
        ;;
    *)
        echo "$_filename: Invalid option '$1'" >&2
        exit 1
        ;;
    esac
}
while getopts ":hvu-:" o; do
    case "${o}" in
    -)
        case "${OPTARG}" in
        help)
            option 'h' "$OPTARG"
            ;;
        version)
            option 'v' "$OPTARG"
            ;;
        *)
            echo "$_filename: Unknown option --${OPTARG}" >&2
            exit 1
            ;;
        esac
        ;;
    h)
        option "$o" "$OPTARG"
        ;;
    v)
        option "$o" "$OPTARG"
        ;;
    *)
        if [ "$OPTERR" != 1 ] || [ "${OPTSPEC:0:1}" = ":" ]; then
            echo "$_filename: Non-option argument: '-${OPTARG}'" >&2
        fi
        echo "$_filename: Unknown option -${OPTARG}" >&2
        exit 1
        ;;
    esac
done
case $1 in
install)
    if mainInstall; then
        echo "$_filename: done"
    else
        echo "$_filename: completed with error"
    fi
    ;;
uninstall)
    uninstall
    ;;
*)
    echo "$_filename: Unkown verb '$1'"
    ;;

esac
