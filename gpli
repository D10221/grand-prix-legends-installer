#!/usr/bin/env bash
# # Grand Prix Legends installer <small>(wip)</small>
# Grand Prix Legends installer for Wine

# Creates wine prefix, mounts iso, downloads and runs the installer

# ## Works on:
#   - Ubuntu
#   - Maybe Debian/Ubuntu derivatives
#   - MacOS
#   - WSL (partially)

# ## Tested on:
#   - Ubuntu 20.4
#   - MacOS Monterrey 12.3.1
#   - Windows 10 Wsl Ubuntu 20.4

# ## Requires:
#    - bash 'on mac may require `brew install bash`'
#    - wget
#    - wine
#    - md5sum|shasum
#    - udisksctl
#    - file
#    - grep

# ## Downloads:
#    - GrandPrixLegends.iso from archive.org
#    - gplinstall_beta_1.08.exe from  grandprixlegends.info

# ## Notes:
#   - on 'wsl' you will need get display working
#   - on 'wsl' wine doesn't see the mounted drive even when successfully mounted

# ### TODO:
#   - download dependencies and setup prefix for vb6 dependencies
#   - redo argument parsing, its very picky about switch order
#   - don't download until required
#   - switches: NODOWNLOAD, NOCHECKSUM
#   - uninstall doesn't uninstall but nukes the wine prefix
#   - switch: --info, display installation details

# this script version
VERSION=0.0.1

GPL_HOME=$HOME/.local/share/grand-prix-legends
CACHE="$HOME/.cache/grand-prix-legends"
ISO_URL="https://archive.org/download/grand-prix-legends/GrandPrixLegends.iso"
ISO=$CACHE/grand-prix-legends.iso
ISO_MD5="c42ff47a96633e28a6d03afa078b1da2  $ISO"
ISO_SHASUM="082542e01a9e63c914a8f34f77ee306531a2aa13  $ISO"
ISO_NAME="$(basename $ISO)"
# Global mounting point, to use by 'mount' , NOT by 'udisksctl'
ISO_MOUNTING_POINT="/mnt/$ISO_NAME"
INSTALLER_URL="http://gem.grandprixlegends.info/gplinstall_beta_1.08.exe"
INSTALLER="$CACHE/gplinstall_beta_1.08.exe"
INSTALLER_MD5="dd5b2a23b224dcf553ff7bac9082b045  $INSTALLER"
INSTALLER_SHASUM="5223d8e8c577ec4504fc8c9491b03c61710af263  $INSTALLER"
INSTALLER_LOG="$HOME/$(basename $INSTALLER).log"
GEM_URL="http://gem.grandprixlegends.info/GEM/GEMPackage_2.5.0.32.exe"
GEM="$CACHE/GEMPackage_2.5.0.32.exe"
GEM_MD5="d82cd2428ce28081a4dca6f3e395e95a  $GEM"
GEM_SHASUM="e8ce456a6db5c2440cb0501accc553730e2ed321  $GEM"
GEM_LOG="$HOME/$(basename $GEM).log"
WINEPREFIX="$GPL_HOME/pfx"
ISO_DEVICE="/dev/disk/by-label/GPL"
WINE="$(which wine)"
_filename=$(basename $0)
# use find?
GPL_EXE="$WINEPREFIX/drive_c/Sierra/GPL/gpl.exe"
GEM_EXE="$WINEPREFIX/drive_c/GPLSecrets/GEM+/GEMP2.exe"
# OSTYPE
OS_LINUX='linux'
OS_DARWIN='darwin'
OS_WSL='wsl'
OS=''
case "$OSTYPE" in
linux*)
    OS=$OS_LINUX
    if [ ! -z "$WSL_DISTRO_NAME" ] || [[ $(uname -r) =~ "-microsoft-" ]]; then
        OS=$OS_WSL
    fi
    ;;
darwin*)
    OS=$OS_DARWIN
    ;;
*)
    echo "OSTYPE $OSTYPE Not Implemented" >&2
    exit 1
    ;;
esac
#
# error echoes to stderr
#
error() {
    echo -e "\e[31m$_filename: $@\e[0m" >&2
}
#
# debug
#
debug() {
    if [ ! -z "$DEBUG" ]; then
        echo -e "\e[33m$_filename/${FUNCNAME[1]}: $@\e[0m"
    fi
}
#
# info
#
info() {
    echo -e "\e[36m$_filename/${FUNCNAME[1]}: $@\e[0m"
}
#
# SUDO
#
Sudo() {
    if ! [[ "$EUID" -eq 0 ]]; then
        echo 'sudo'
    else
        echo ''
    fi
}
#
#
# args:
#   $1  'file'
#   $2  'url'
#
download() {
    if [ ! -f "$1" ]; then
        mkdir -p "$(dirname $1)"
        return $(wget $2 -O "$1")
    fi
    return 0
}
#
# Args:
#   $1  'file'
#   $2  'md5sum'
#   $3  'shasum'
#
verify() {
    local actual=""
    if [ ! -z "$(which shasum)" ]; then
        actual="$(shasum $1)"
        expected=$3
    elif [ ! -z "$(which md5sum)" ]; then
        actual="$(md5sum $1)"
        expected=$2
    else
        error "Can't verify $1"
        return 1
    fi
    if [ "$actual" != "$expected" ]; then
        # debug "Expected $expected"
        # debug "Actual   $actual"
        error "Bad hash: $(basename $1)"
        return 1
    fi
    return 0
}
#
# try find backing file for device
# Args:
#   $1 $ISO_DEVICE
# Returns:
#   string or error
#
userMountBackingFile() {
    local USER_MOUNT_BACKING_FILE=""
    local UDISKSCTL_INFO=$(udisksctl info -b "$1" | grep BackingFile)
    local r="\s+BackingFile:\s+(.*)"
    if [[ "$UDISKSCTL_INFO" =~ $r ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        return 1
    fi
}
UNMOUNT=0
#
# mount ISO without sudo
#
userMount() {
    if [[ $NOUSERMOUNT -eq 1 ]]; then # debug
        return 1                      # not unmounted
    fi
    # get the device backing file
    USER_MOUNT_BACKING_FILE="$(userMountBackingFile $ISO_DEVICE)"
    # already mounted?
    if [ -f "$USER_MOUNT_BACKING_FILE" ] && [ $USER_MOUNT_BACKING_FILE == $ISO ]; then
        UNMOUNT=0
        return 0
    elif udisksctl loop-setup -f $ISO; then
        UNMOUNT=1
        return 0 # mounted
    else
        return 1 # failed
    fi
}
#
# unmount ISO without sudo
#
userUnmount() {
    if [[ $NOUSERMOUNT -eq 1 ]]; then
        return 1
    fi
    if ! udisksctl unmount -b $ISO_DEVICE; then
        return 1
    fi
}
#
# Args:
#       $1  'Drive Letter'
#
validWslDrive() {
    if [ -z "$1" ]; then
        error "wsldrive is required to mount $ISO_NAME, relaunch with --nomount OR --wsldrive='<drive>', see --help for more"
        return 1 # failed
    fi
    if ! [[ "$1" =~ ^[a-zA-Z]$ ]]; then
        error "'$1' is not a valid drive letter, see --help for more"
        return 1 # failed
    fi
}
#
# mount ISO with 'mount' , needs root
#
Mount() {
    if [[ $NOROOTMOUNT -eq 1 ]]; then # debug
        return 1                      # failed
    fi
    # if not mounted
    if [ -z "$(mount | grep $ISO_NAME)"]; then
        info "Mounting '$ISO_NAME' into '$ISO_MOUNTING_POINT'"
        if [ $OS == $OS_WSL ]; then
            # WSL
            if ! validWslDrive $WSLDRIVE; then
                return 1 # failed
            fi
            if "$(Sudo)" mkdir -p "$ISO_MOUNTING_POINT" &&
                "$(Sudo)" mount -t drvfs "$WSLDRIVE:" "$ISO_MOUNTING_POINT"; then
                # OK
                UNMOUNT=1 # flag unmount
            else
                return 1 # failed
            fi
        else
            #linux
            if "$(Sudo)" mkdir -p "$ISO_MOUNTING_POINT" &&
                "$(Sudo)" mount -o ro,loop "$ISO" "$ISO_MOUNTING_POINT"; then
                #OK
                UNMOUNT=1 # flag unmount
            else
                return 1 # failed
            fi
        fi
    else
        return 0 # mounted
    fi
}
#
# unmount ISO_MOUNTING_POINT , needs root
#
Unmount() {
    if ! [[ $UNMOUNT -eq 1 ]]; then
        return 0 # not mounted
    fi
    local SUDO="$(Sudo)"
    if ! $SUDO umount "$ISO_MOUNTING_POINT"; then
        error "'$SUDO umount $ISO_MOUNTING_POINT' failed"
        return 1 # fail
    fi
}
#
# try un mount iso if it was mounted
# by $OS
#
tryMount() {
    if [[ $NOMOUNT -eq 1 ]]; then
        # --nomount?
        return 0
    fi
    # by os
    case $OS in
    $OS_DARWIN)
        if hdiutil mount "$ISO"; then
            debug "$ISO_NAME '$OS' 'Mounted' by hdiutil"
            UNMOUNT=1
            return 0
        fi
        ;;
    $OS_LINUX)
        if userMount; then
            debug "$ISO_NAME '$OS' 'Mounted' by 'userMount'"
            return 0
        fi
        if Mount; then
            debug "$ISO_NAME '$OS' 'Mounted' by 'Mount'"
            return 0
        fi
        ;;
    $OS_WSL)
        if Mount; then
            debug "$ISO_NAME '$OS' 'Mounted' by 'Mount'"
            UNMOUNT=1
            return 0
        fi
        ;;
    *)
        error "Mount '$ISO_NAME' on '$OS' in not implemented"
        return 1 #failed
        ;;
    esac
    # Failed
    msg="'$OS': Unable to mount '$ISO_NAME'\n"
    msg+=" You will need to mount '$ISO'\n"
    msg+=" Or load the Disc your self.\n"
    msg+=" Relaunch with '--nomount' option to skip this error"
    error "$msg"
    return 1
}
#
# try un unmount iso if it was mounted
# by $OS
#
tryUnmount() {
    if [[ $UNMOUNT -eq 1 ]]; then
        debug "unmounting $ISO_NAME"
        if [ $OS == $OS_DARWIN ]; then
            hdiutil unmount /Volumes/GPL
        elif [ $OS == $OS_LINUX ] && userUnmount; then
            debug "unmounted $ISO_NAME by 'udisksctl'"
        elif Unmount; then
            debug "$ISO_NAME 'unmounted' by 'unmount'"
        else
            error "Failed to unmount $ISO"
        fi
    fi
}
#
# install on linux
#
Install() {
    # create dirs to store downloaded files and prefix
    if ! download $ISO $ISO_URL ||
        ! download $INSTALLER $INSTALLER_URL ||
        ! download $GEM $GEM_URL; then
        error "Download failed"
        return 1
    fi
    # verify
    if ! verify $ISO "$ISO_MD5" "$ISO_SHASUM" ||
        ! verify $INSTALLER "$INSTALLER_MD5" "$INSTALLER_SHASUM" ||
        ! verify $GEM "$GEM_MD5" "$GEM_SHASUM"; then
        debug "verify failed"
        return 1
    fi
    # if there isn't wine ?
    if [ ! -f "$WINE" ]; then
        error "can't find wine, get wine on the \$PATH and try again"
        return 1
    fi
    # tryMount
    local mounted=0
    if tryMount; then
        mounted=1
    fi
    # installing GPL
    local GPL_INSTALLED=0
    if [[ $mounted -eq 1 ]]; then
        if [ -f $GPL_EXE ]; then
            debug "$(basename $GPL_EXE) installed at $(dirname $GPL_EXE)"
            GPL_INSTALLED=1
        fi
        if [[ $GPL_INSTALLED -eq 0 ]]; then
            debug "Installing GPL"
            if mkdir -p "$WINEPREFIX" && WINEPREFIX="$WINEPREFIX" wine "$INSTALLER" >"$INSTALLER_LOG" 2>&1; then
                GPL_INSTALLED=1
                debug "installed GPL"
            else
                error "Failed to install GPL"
            fi
        fi
    else
        error "Can't install GPL"
    fi
    # installing GEM
    local GEM_INSTALLED=0
    if [ -f $GEM_EXE ]; then
        debug "$(basename $GEM) installed at $(dirname $GEM)"
        GEM_INSTALLED=1
    fi
    if [[ $GPL_INSTALLED -eq 1 ]] && [[ "$GEM_INSTALLED" -eq 0 ]]; then
        debug "installing GEM"
        if mkdir -p "$WINEPREFIX" && WINEPREFIX="$WINEPREFIX" wine "$GEM" >"$GEM_LOG" 2>&1; then
            debug "installed GEM?"
        else
            debug "failed to install GEM"
        fi
    else
        error "Can't install GEM"
    fi
    # tryUnmount
    tryUnmount
}
#
# Uninstall GPL and remove prefix
#
uninstall() {
    if $YES; then
        if rm -rf $GPL_HOME; then
            return 0
        else
            return 1
        fi
    fi
    read -p "Uninstall GPL and remove prefix (y/n)? " u
    case $u in
    y)
        if rm -rf $GPL_HOME; then
            return 0
        else
            return 1
        fi
        ;;
    n)
        error "Uninstall cancelled."
        ;;
    *)
        error "Unknown option '$u', Uninstall cancelled."
        return 1
        ;;
    esac
}
#
# Args:
#   $1  'option' ex, 'x=1'
# Returns:
#   $2  'value'
#
optionValue() {
    local r="\w+=(.*)"
    if [[ "$1" =~ $r ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        return 1
    fi
}
#
# show usage
#
usage() {
    echo "Grand Prix Legends Wine Installer v$VERSION"
    echo "usage: '$_filename [verb] [options]'"
    echo "verbs: "
    echo "  install        'run GPL installers'"
    echo "  uninstall      'remove GPL and Wine Prefix'"
    echo "options:"
    echo "  -h --help      'Show this'"
    echo "  -v --version   'Show '$_filename' version'"
    echo "  --nomount      'Do not try to mount ISO'"
    if [ $OS == $OS_WSL ]; then
        echo "  --wsldrive='<drive>'"
        echo "      desc:   'drive letter to mount in wsl environment'"
        echo "              'required on WSL'"
        echo "      <drive>: [az-AZ]"
        echo "      example '--wsldrive=d'"
    fi
    echo "vars:"
    echo " NOMOUNT         'Do not try to mount ISO'"
    echo " NOUSERMOUNT     'Do not try to mount ISO in userspace'"
    echo " NOROOTMOUNT     'Do not try to mount ISO if requires root access"
    echo " DEBUG           'show debug info'"
    echo "examples: "
    echo "$ DEBUG=1 NOMOUNT=1 NOROOTMOUNT=1 NOUSERMOUNT=1 ./gpli.local install"
}
#
if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi
#
# Exec Opts
#
option() {
    case $1 in
    help)
        OPTKEY='h'
        usage
        exit
        ;;
    version)
        OPTKEY='v'
        echo "v$VERSION"
        exit
        ;;
    nomount)
        NOMOUNT=1
        ;;
    wsldrive)
        WSLDRIVE="$2"
        if ! validWslDrive $WSLDRIVE; then
            exit 1
        fi
        ;;
    *)
        error "Invalid option '$1'"
        exit 1
        ;;
    esac
}
# parse opts
while getopts ":hvu-:" o; do
    case "${o}" in
    -)
        case "${OPTARG}" in
        help)
            option 'help' "$(optionValue $OPTARG)"
            ;;
        version)
            option 'version' "$(optionValue $OPTARG)"
            ;;
        nomount)
            shift
            option 'nomount' "$(optionValue $OPTARG)"
            ;;
        wsldrive=*)
            shift
            option 'wsldrive' "$(optionValue $OPTARG)"
            ;;
        *)
            error "Unknown option --${OPTARG}"
            exit 1
            ;;
        esac
        ;;
    h)
        option "help" "$OPTARG"
        ;;
    v)
        option "version" "$OPTARG"
        ;;
    *)
        if [ "$OPTERR" != 1 ] || [ "${OPTSPEC:0:1}" = ":" ]; then
            error "bad optiont: '-${OPTARG}'"
        fi
        error "Unknown option -${OPTARG}"
        exit 1
        ;;
    esac
done
# launch verbs
case $1 in
install)
    if Install; then
        debug "done"
    else
        error "done with error"
    fi
    ;;
uninstall)
    uninstall
    ;;
*)
    error "Unkown verb '$1'"
    exit 1
    ;;

esac
