#!/usr/bin/env bash
# # Grand Prix Legends installer <small>(wip)</small>
# Grand Prix Legends installer for wine

# Creates wine prefix, mounts iso, downloads and runs the installer

# ## Works on:
#   - Ubuntu
#   - Maybe Debian/Ubuntu derivatives
#   - MacOS
#   - WSL (partially)

# ## Tested on:
#   - Ubuntu 20.4
#   - MacOS Monterrey 12.3.1
#   - Windows 10 Wsl Ubuntu 20.4

# ## Requires:
#    - bash 'on mac may require `brew install bash`'
#    - wget
#    - wine
#    - md5sum|shasum
#    - udisksctl
#    - file
#    - grep
#    - innoextract

# ## Downloads:
#    - GrandPrixLegends.iso from archive.org
#    - gplinstall_beta_1.08.exe from  grandprixlegends.info

# ## Notes:
#   - on 'wsl' you will need get display working
#   - on 'wsl' wine doesn't see the mounted drive even when successfully mounted

# ### TODO:
#   - download dependencies and setup prefix for vb6 dependencies
#   - redo argument parsing, its very picky about switch order
#   - don't download until required
#   - switches: NODOWNLOAD, NOCHECKSUM
#   - uninstall doesn't uninstall but nukes the wine prefix
#   - switch: --info, display installation details

# Meta
VERSION=0.0.1
_filename=$(basename $0)

GPL_HOME=$HOME/.local/share/grand-prix-legends
CACHE="$HOME/.cache/grand-prix-legends"
ISO_URL="https://archive.org/download/grand-prix-legends/GrandPrixLegends.iso"
ISO=$CACHE/grand-prix-legends.iso
ISO_MD5="c42ff47a96633e28a6d03afa078b1da2  $ISO"
ISO_SHASUM="082542e01a9e63c914a8f34f77ee306531a2aa13  $ISO"
ISO_NAME="$(basename $ISO)"
# Global mounting point, to use by 'mount', NOT by 'udisksctl'
ISO_MOUNTING_POINT="/mnt/$ISO_NAME"
INSTALLER_URL="http://gem.grandprixlegends.info/gplinstall_beta_1.08.exe"
INSTALLER="$CACHE/gplinstall_beta_1.08.exe"
INSTALLER_MD5="dd5b2a23b224dcf553ff7bac9082b045  $INSTALLER"
INSTALLER_SHASUM="5223d8e8c577ec4504fc8c9491b03c61710af263  $INSTALLER"
INSTALLER_LOG="$HOME/$(basename $INSTALLER).log"
GEM_URL="http://gem.grandprixlegends.info/GEM/GEMPackage_2.5.0.32.exe"
GEM="$CACHE/GEMPackage_2.5.0.32.exe"
GEM_MD5="d82cd2428ce28081a4dca6f3e395e95a  $GEM"
GEM_SHASUM="e8ce456a6db5c2440cb0501accc553730e2ed321  $GEM"
GEM_LOG="$HOME/$(basename $GEM).log"
ISO_DEVICE="/dev/disk/by-label/GPL"
# wine
WINE="$(which wine)"
WINEPREFIX="$GPL_HOME/pfx"
DRIVE_C="$WINEPREFIX/drive_c"
WIN_VERSION="win7"
# use find?
GPL_EXE="$WINEPREFIX/drive_c/Sierra/GPL/gpl.exe"
GEM_EXE="$WINEPREFIX/drive_c/GPLSecrets/GEM+/GEMP2.exe"
# vb
# VB Community Runtime 1.00
VB_RUNTIME_URL='https://www.vb-paradise.de/index.php/Attachment/27536-vbcrt-zip/?s=a4f2f3891cbdcc314f7a2a2dd5b5338e22d42441'
VB_RUNTIME_ZIP="$CACHE/VBCommunityRuntime1.00.zip"
VB_RUNTIME_EXE="$CACHE/VB Community Runtime 1.00.exe"
# OSTYPE
OS_LINUX='linux'
OS_DARWIN='darwin'
OS_WSL='wsl'
OS=''
case "$OSTYPE" in
linux*)
    OS=$OS_LINUX
    if [ ! -z "$WSL_DISTRO_NAME" ] || [[ $(uname -r) =~ "-microsoft-" ]]; then
        OS=$OS_WSL
    fi
    ;;
darwin*)
    OS=$OS_DARWIN
    ;;
*)
    echo "OSTYPE $OSTYPE Not Implemented" >&2
    exit 1
    ;;
esac
#
# error echoes to stderr
#
error() {
    echo -e "\e[31m$_filename/${FUNCNAME[1]}: $@\e[0m" >&2
}
#
# debug
#
debug() {
    if [ ! -z "$DEBUG" ]; then
        echo -e "\e[35m$_filename/${FUNCNAME[1]}: $@\e[0m"
    fi
}
#
# warn
#
warn() {
    echo -e "\e[33m$_filename/${FUNCNAME[1]}: $@\e[0m"
}
#
# info
#
info() {
    echo -e "\e[32m$_filename/${FUNCNAME[1]}: $@\e[0m"
}
#
# SUDO
#
Sudo() {
    if ! [[ "$EUID" -eq 0 ]]; then
        echo 'sudo'
    else
        echo ''
    fi
}
#
# Download url
# creates target directory
# args:
#   $1  'file' local name, full path
#   $2  'url'
#
download() {
    if [ ! -f "$1" ]; then
        mkdir -p "$(dirname $1)"
        debug "Downloading $2 as $1"
        return $(wget $2 -O "$1")
    fi
    return 0
}
#
# Args:
#   $1  'file'
#   $2  'md5sum' set to
#   $3  'shasum'
#
verify() {
    if [ -z "$2" ] && [ -z "$3" ]; then
        return 0 # disabled
    fi
    local actual=""
    if [ ! -z "$(which shasum)" ]; then
        actual="$(shasum $1)"
        expected=$3
    elif [ ! -z "$(which md5sum)" ]; then
        actual="$(md5sum $1)"
        expected=$2
    else
        error "Can't verify $1"
        return 1
    fi
    if [ "$actual" != "$expected" ]; then
        debug "Expected $expected"
        debug "Actual   $actual"
        error "Bad hash: $(basename $1)"
        return 1
    fi
    return 0
}
#
# try find backing file for device
# Args:
#   $1 $ISO_DEVICE
# Returns:
#   string or error
#
userMountBackingFile() {
    local USER_MOUNT_BACKING_FILE=""
    local UDISKSCTL_INFO=$(udisksctl info -b "$1" | grep BackingFile)
    local r="\s+BackingFile:\s+(.*)"
    if [[ "$UDISKSCTL_INFO" =~ $r ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        return 1
    fi
}
UNMOUNT=0
#
# mount ISO without sudo
#
userMount() {
    if [[ $NOUSERMOUNT -eq 1 ]]; then # debug
        return 1                      # not unmounted
    fi
    # get the device backing file
    USER_MOUNT_BACKING_FILE="$(userMountBackingFile $ISO_DEVICE)"
    # already mounted?
    if [ -f "$USER_MOUNT_BACKING_FILE" ] && [ $USER_MOUNT_BACKING_FILE == $ISO ]; then
        UNMOUNT=0
        return 0
    elif udisksctl loop-setup -f $ISO; then
        UNMOUNT=1
        return 0 # mounted
    else
        return 1 # failed
    fi
}
#
# unmount ISO without sudo
#
userUnmount() {
    if [[ $NOUSERMOUNT -eq 1 ]]; then
        return 1
    fi
    if ! udisksctl unmount -b $ISO_DEVICE; then
        return 1
    fi
}
#
# Args:
#       $1  'Drive Letter'
#
validWslDrive() {
    if [ -z "$1" ]; then
        error "wsldrive is required to mount $ISO_NAME, relaunch with --nomount OR --wsldrive='<drive>', see --help for more"
        return 1 # failed
    fi
    if ! [[ "$1" =~ ^[a-zA-Z]$ ]]; then
        error "'$1' is not a valid drive letter, see --help for more"
        return 1 # failed
    fi
}
WINE_DRIVE=${WINE_DRIVE:-"d"}
#
# mount ISO with 'mount' , needs root
#
Mount() {
    if [[ $NOROOTMOUNT -eq 1 ]]; then # debug
        return 1                      # failed
    fi
    # if not mounted
    if [ -z "$(mount | grep $ISO_NAME)"]; then
        info "Mounting '$ISO_NAME' into '$ISO_MOUNTING_POINT'"
        if [ $OS == $OS_WSL ]; then
            # Mounting in WSL is different
            if ! validWslDrive $WSLDRIVE; then
                warn "WSLDRIVE '$WSLDRIVE' is not valid, using 'D:'"
                return 1 # failed
            fi
            if ! validWslDrive $WINE_DRIVE; then
                warn "WINE_DRIVE '$WINE_DRIVE' is not valid, using '$WSLDRIVE' from WSLDRIVE"
                WINE_DRIVE=WSLDRIVE
            fi
            if "$(Sudo)" mkdir -p "$ISO_MOUNTING_POINT" &&
                "$(Sudo)" mount -t drvfs "$WSLDRIVE:" "$ISO_MOUNTING_POINT"; then
                # create simlink in pfx/dosdevices/d:
                if ln -s "$ISO_MOUNTING_POINT" "$WINEPREFIX/dosdevices/$WINE_DRIVE:"; then # or wine doesn't see it
                    UNMOUNT=1                                                              # OK, flag unmount
                fi
            else
                return 1 # failed
            fi
        else
            # mounting on linux
            if "$(Sudo)" mkdir -p "$ISO_MOUNTING_POINT" &&
                "$(Sudo)" mount -o ro,loop "$ISO" "$ISO_MOUNTING_POINT"; then
                #OK
                UNMOUNT=1 # flag unmount
            else
                return 1 # failed
            fi
        fi
    else
        return 0 # mounted
    fi
}
#
# unmount ISO_MOUNTING_POINT , needs root
#
Unmount() {
    if ! [[ $UNMOUNT -eq 1 ]]; then
        return 0 # not mounted
    fi
    local SUDO="$(Sudo)"
    if ! $SUDO umount "$ISO_MOUNTING_POINT"; then
        error "'$SUDO umount $ISO_MOUNTING_POINT' failed"
        return 1 # fail
    fi
}
#
# try un mount iso if it was mounted
# by $OS
#
tryMount() {
    if [[ $NOMOUNT -eq 1 ]]; then
        # --nomount?
        return 0
    fi
    debug "Mounting '$ISO_NAME'"
    # by os
    case $OS in
    $OS_DARWIN)
        if hdiutil mount "$ISO"; then
            debug "$ISO_NAME '$OS' 'Mounted' by hdiutil"
            UNMOUNT=1
            return 0
        fi
        ;;
    $OS_LINUX)
        # try to mount without priviledge
        if userMount; then
            debug "$ISO_NAME '$OS' 'Mounted' by 'userMount'"
            return 0
        fi
        # mount with sudo
        if Mount; then
            debug "$ISO_NAME '$OS' 'Mounted' by 'Mount'"
            return 0
        fi
        ;;
    $OS_WSL)
        if Mount; then
            debug "$ISO_NAME '$OS' 'Mounted' by 'Mount'"
            UNMOUNT=1
            return 0
        fi
        ;;
    *)
        error "Mount '$ISO_NAME' on '$OS' in not implemented"
        return 1 #failed
        ;;
    esac
    # Failed
    msg="'$OS': Unable to mount '$ISO_NAME'\n"
    msg+=" You will need to mount '$ISO'\n"
    msg+=" Or load the Disc your self.\n"
    msg+=" Relaunch with '--nomount' option to skip this error"
    error "$msg"
    return 1
}
#
# try un unmount iso if it was mounted
# by $OS
#
tryUnmount() {
    if [[ $UNMOUNT -eq 1 ]]; then
        debug "unmounting $ISO_NAME"
        if [ $OS == $OS_DARWIN ]; then
            hdiutil unmount /Volumes/GPL
            # debug "'$OS' '$ISO_NAME' unmounted by 'hdiutil'"
        elif [ $OS == $OS_LINUX ]; then
            if ! userUnmount; then
                if ! Unmount; then
                    return 1 # failed
                fi
            fi
            debug "'$OS' '$ISO_NAME' unmounted by 'udisksctl'"
        elif [ $OS == $OS_WSL ]; then
            if ! Unmount; then
                if ! rm "$WINE_DRIVE_PATH"; then
                    warn "Failed to remove '$WINE_DRIVE_PATH'"
                    return 1 # failed
                fi
            fi
            debug "'$OS' '$ISO_NAME' unmounted by 'unmount'"
        else
            error "Unmounting $ISO on $OS is not implemented"
        fi
    fi
}
#
# Download and verify
# Args:
#   $1  'file' local name, full path
#   $2  'url'
#   $3  'md5'
#   $4  'sha'
#
get() {
    if ! download $1 $2; then
        error "failed to download '$(basename $1)' from '$2'"
        return 1
    fi
    # verify
    if ! verify $1 "$3" "$4"; then
        debug "failed to verify '$(basename $1)'"
        return 1
    fi
}
#
# Run installer
# Usage:
#   Install [options] [...selection]
# Opts:
#   -y 'yes' accepts all options , not implemented
# Example
#  'install # gpl'
#  'install gpl gem gplsecrets vbr'
#
Install() {
    local YES=0
    while getopts ":f" arg; do
        case ${arg} in
        y)
            YES=1
            debug "Set to reinstall"
            ;;
        *)
            error "Unknown option '$OPTARG'"
            return 1
            ;;
        esac
    done
    if [[ $# -lt 1 ]]; then
        error "Expected args"
        return 1
    else
        for a in $@; do
            case "$a" in
            -*) ;; # skip options
            gpl)
                # get GPL ISO installer, download if not in cache
                if ! get "$ISO" "$ISO_URL" "$ISO_MD5" "$ISO_SHASUM"; then
                    return 1
                fi
                # get GPL installer, download if not in cache
                if ! get "$INSTALLER" "$INSTALLER_URL" "$INSTALLER_MD5" "$INSTALLER_SHASUM"; then
                    return 1
                fi
                # try mount ISO, required by GPL installer
                local mounted=0
                if tryMount; then
                    mounted=1
                fi
                #  GPL installer needs the CD
                if [[ $mounted -eq 1 ]]; then
                    debug "Running GPL installer"
                    if runExe "$INSTALLER"; then
                        GPL_INSTALLED=1
                        debug "installed GPL"
                    else
                        error "Failed to install GPL"
                    fi
                else
                    error "Can't install GPL"
                fi
                # try Unmount ISO
                tryUnmount
                ;;
            gem)
                debug "installing GEM"
                # get GEM installer  download if not in cache
                if get "$GEM" "$GEM_URL" "$GEM_MD5" "$GEM_SHASUM"; then
                    debug "Runnig GEM installer"
                    if runExe "$GEM"; then
                        GEM_INSTALLED=1
                        debug "installed GEM?"
                    else
                        debug "failed to install GEM"
                    fi
                fi
                ;;
            gplsecrets)
                # Unpack GEM: into drive c:\
                # prefix breaks when installing GEM+ with the installer
                # try unpack required files
                # WARN: 'GPLPatchDLL.dll must be included and extracted into syswow64?'
                # and the VB runtime after!
                if get "$GEM" "$GEM_URL" "$GEM_MD5" "$GEM_SHASUM"; then
                    # get GEM installer  download if not in cache
                    local GPLSecrets="$DRIVE_C/GPLSecrets"
                    if [ ! -d "$DRIVE_C" ]; then
                        if ! createPrefix; then
                            debug "Failed to create prefix: $WINEPREFIX"
                            return 1
                        fi
                    fi
                    if ! innoextract "$GEM" -d "$DRIVE_C/gplsecrets" -s; then
                        error "failed to 'innoextract' '$(basename $GPLSecrets)'"
                    else
                        info "innoextracted '$(basenameNoExtension $GEM)' into '$GPLSecrets'"
                        if ! cp "$DRIVE_C/gplsecrets/syswow64/GPLPatchDLL.dll" "$DRIVE_C/windows/syswow64/"; then
                            warn "Failed to copy GPLPatchDLL.dll to windows/syswow64"
                            warn "GEMP2.exe might not work"
                        fi
                    fi
                fi
                ;;
            vbr)
                if get "$VB_RUNTIME_ZIP" "$VB_RUNTIME_URL"; then
                    if Unzip "$VB_RUNTIME_ZIP" "$CACHE"; then
                        # unzipped to cache
                        debug "Running VB Runtime Installer"
                        if runExe "$VB_RUNTIME_EXE"; then
                            VB_RUNTIME_INSTALLED=1
                            info "VB Runtime Installed"
                        else
                            error "Can't install VB Runtime"
                        fi
                    else
                        debug "can't unzip 'VB Runtime'"
                    fi
                fi
                ;;
            *)
                error "Don't know how to install '$a'"
                exit 1
                ;;
            esac
        done
    fi   
}
#
# Args:
#   $1  'zip file'
#   $2  'target directory'
#
Unzip() {
    if [ ! -f "$(which unzip)" ]; then
        error "Can't find 'unzip'"
    fi
    debug "Unzipping '$1' to '$2'"
    unzip -oq "$1" -d "$2"
    return $?
}
#
# get basename without ext
# ex: basenameNoExtension 'file.zip' '.zip'
#
basenameNoExtension() {
    echo $(basename "$1") | tr -d "$2"
}
#
#
#
createPrefix() {
    if ! runWithPrefix wine winecfg -v "$WIN_VERSION"; then
        return 1
    else
        debug "Created prefix as '$WIN_VERSION'"
    fi
}
#
# Run exe on WINEPREFIX, log to ~/<exe-name>.log
# Args:
#   $1 file
#
runExe() {
    if [ ! -f "$WINE" ]; then
        error "can't find wine, get wine on the \$PATH and try again"
        return 1
    fi
    if ! mkdir -p "$WINEPREFIX" || ! WINEPREFIX="$WINEPREFIX" $WINE "$1" >~/"$(basename "$1").log" 2>&1; then
        return 1
    fi
}
#
# Run cmd on WINEPREFIX env
#
runWithPrefix() {
    if [ ! -f "$WINE" ]; then
        error "can't find wine, get wine on the \$PATH and try again"
        return 1
    fi
    if ! mkdir -p "$WINEPREFIX" || ! WINEPREFIX="$WINEPREFIX" $@; then
        error "Failed to run '$@' on WINEPREFIX="$WINEPREFIX""
        return 1
    fi
}
#
# Args:
#   $1  'label'
#   $2  'target'
#
remove() {
    warn "Remove '$1' '$2'"
    read -p "Cannot be undone (y/n)? " u
    case $u in
    y)
        rm -rf "$2"
        return $?
        ;;
    n)
        info "Cancelled."
        ;;
    *)
        error "Unknown option '$u', Cancelled!"
        return 1
        ;;
    esac
}
#
# Uninstall GPL and remove prefix
# Args:
#   '$@' [gpl,gem]
#
uninstall() {
    if [[ $# -lt 1 ]]; then
        error "expected args"
        return 1
    else
        for a in $@; do
            case "$a" in
            gpl)
                local DIR=$(dirname $GPL_EXE)
                remove 'GPL' "$DIR"
                ;;

            gem)
                local DIR=$(dirname $GEM_EXE)
                remove 'GEM+' "$DIR"
                ;;
            gplsecrets)
                remove 'GPL' "$DRIVE_C/gplsecrets"
                ;;
            pfx)
                remove 'prefix' "$WINEPREFIX"
                ;;
            *)
                error "Can't remove '$a'"
                return 1
                ;;
            esac
        done
    fi

}
#
# open WINEPREFIX/?
#
Open() {
    if [ $OS == $OS_DARWIN ]; then
        open $WINEPREFIX/"$1"
    else
        xdg-open $WINEPREFIX/"$1"
    fi
}
#
#
#
Launch() {
    case "$1" in
    gpl)
        runWithPrefix "$WINE" start 'c:\sierra\GPL\gpl.exe' /d 'c:\sierra\GPL'
        ;;
    gpl67)
        runWithPrefix "$WINE" 'c:\sierra\GPL\gplc67.exe' /d 'c:\sierra\GPL'
        ;;
    gem+)
        # TODO: use find -> winepath ?
        if ! runWithPrefix "$WINE" 'c:\GPLSecrets\GEM+\GEMP2.exe' /d 'c:\sierra\GPL'; then
            if ! runWithPrefix "$WINE" 'c:\gplsecrets\app\GEM+\GEMP2.exe'; then
                error "Can't find or open GEMP2.exe"
            fi
        fi
        ;;
    *)
        error "Don't how to open '$1'"
        ;;
    esac
}
#
# Args:
#   $1  'option' ex, 'x=1'
# Returns:
#   $2  'value'
#
optionValue() {
    local r="\w+=(.*)"
    if [[ "$1" =~ $r ]]; then
        echo "${BASH_REMATCH[1]}"
    else
        return 1
    fi
}
#
# show usage
#
usage() {
    echo "Grand Prix Legends wine Installer v$VERSION"
    echo "Usage: '$_filename [verb] [options]'"
    echo "Verbs: "
    echo "  install [options?] [what]?   'run GPL installers'"
    echo "      options:"
    echo "          no options implemented"
    echo "      what:"
    echo "         values: gpl gem vbr gplsecrets"
    echo "      example:"
    echo "          \$gpli install -r gpl # REINSTALL gpl"
    echo "          \$gpli install -r gpl gem vbr # reinstall gpl gem vbr"
    echo "  uninstall [options?] 'remove GPL,GEM and wine Prefix'"
    echo "      options: "
    echo "          'gpl'   remove 'c:\Sierra\gpl'"
    echo "          'geml'  remove 'c:\Sierra\gpl'"
    echo "          'pfx'      remove 'prefix' (default)"
    echo "  run                   \"run something in gpl's WINEPREFIX\""
    echo "      example:    '\$$_filename run wine winecfg'"
    echo "  wine                  \"run wine 'something' gpl's WINEPREFIX\""
    echo "      example:    '\$$_filename wine winecfg'"
    echo "  open"
    echo "      example: '\$$_filename open' # opens \$WINEPREFIX"
    echo "      example: '\$$_filename open dirve_c ' # opens \$WINEPREFIX/drive_c"
    echo "  launch"
    echo "      example: '\$$_filename launch gpl'  # starts wine 'c:\Sierra\GPL\gpl.exe'"
    echo "      example: '\$$_filename launch gem+' # starts wine 'c:\GPLSecrets\GEM+\GEMP2.exe'"
    echo ""
    echo "Options:"
    echo "  -h --help      'Show this'"
    echo "  -v --version   'Show '$_filename' version'"
    echo "  --nomount      'Do not try to mount ISO'"
    if [ $OS == $OS_WSL ]; then
        echo "  --wsldrive='<drive>'"
        echo "      desc:   'drive letter to mount in wsl environment'"
        echo "              'required on WSL'"
        echo "      <drive>: [az-AZ]"
        echo "      example '--wsldrive=d'"
    fi
    echo ""
    echo "Vars:"
    echo " NOMOUNT         'Do not try to mount ISO'"
    echo " NOUSERMOUNT     'Do not try to mount ISO in userspace'"
    echo " NOROOTMOUNT     'Do not try to mount ISO if requires root access"
    echo " DEBUG           'show debug info'"
    echo "                  example '\$ DEBUG=1 ./gpli.local install'"
    if [ $OS == $OS_WSL ]; then
        echo " WSLDRIVE        'show debug info'"
        echo "    desc:        'drive letter to mount in wsl environment'"
        echo "                 'required to install GPL on WSL'"
        echo "      <drive>: [az-AZ]"
        echo "                  example '\$ WSLDRIVE=d ./gpli.local install'"
    fi
}
#
if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi
#
# Exec Opts
#
option() {
    case $1 in
    help)
        OPTKEY='h'
        usage
        exit
        ;;
    version)
        OPTKEY='v'
        echo "v$VERSION"
        exit
        ;;
    nomount)
        NOMOUNT=1
        ;;
    wsldrive)
        WSLDRIVE="$2"
        if ! validWslDrive $WSLDRIVE; then
            exit 1
        fi
        ;;
    *)
        error "Invalid option '$1'"
        exit 1
        ;;
    esac
}
# parse opts
while getopts ":hvu-:" o; do
    case "${o}" in
    -)
        case "${OPTARG}" in
        help)
            option 'help' "$(optionValue $OPTARG)"
            ;;
        version)
            option 'version' "$(optionValue $OPTARG)"
            ;;
        nomount)
            shift
            option 'nomount' "$(optionValue $OPTARG)"
            ;;
        wsldrive=*)
            shift
            option 'wsldrive' "$(optionValue $OPTARG)"
            ;;
        *)
            error "Unknown option --${OPTARG}"
            exit 1
            ;;
        esac
        ;;
    h)
        option "help" "$OPTARG"
        ;;
    v)
        option "version" "$OPTARG"
        ;;
    ?)
        if [ "$OPTERR" != 1 ] || [ "${OPTSPEC:0:1}" = ":" ]; then
            error "bad optiont: '-${OPTARG}'"
        fi
        error "Unknown option -${OPTARG}"
        exit 1
        ;;
    esac
done
# launch verbs
case $1 in
install)
    shift
    if Install "$@"; then
        debug "done"
    else
        error "done with error"
    fi
    ;;
uninstall)
    shift
    uninstall "$@"
    ;;
run)
    shift
    runWithPrefix $@
    ;;
wine)
    shift
    runWithPrefix "$WINE" $@
    ;;
open)
    shift
    Open "$1"
    ;;
launch)
    shift
    Launch "$1"
    ;;
*)
    error "Unkown verb:'$1'"
    exit 1
    ;;

esac
