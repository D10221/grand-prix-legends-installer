#!/usr/bin/env bash
#
# Grand Prix Legends installer 
# Works on: 
#  - Ubuntu
#  - Maybe Debian/Ubuntu derivatives
#  - Partially on MACOS
# Tested on: 
#  - Ubuntu 20.4
# Requires:
#  - bash
#  - wget
#  - wine 
#  - md5sum|shasum
#  - udisksctl
#  - file
#  - grep
# Downloads:
#  - GrandPrixLegends.iso from archive.org
#  - gplinstall_beta_1.08.exe from  grandprixlegends.info
# Description:
#  - Creates wine prefix, mounts iso and runs the installer
#

# this script version
VERSION=0.0.1

GPL_HOME=~/.local/share/grand-prix-legends
GPL_SETUP_HOME="$GPL_HOME/setup"
ISO_URL="https://archive.org/download/grand-prix-legends/GrandPrixLegends.iso"
ISO=$GPL_SETUP_HOME/grand-prix-legends.iso
ISO_MD5="c42ff47a96633e28a6d03afa078b1da2  $ISO"
ISO_SHASUM="082542e01a9e63c914a8f34f77ee306531a2aa13  $ISO"
INSTALLER_URL="http://gem.grandprixlegends.info/gplinstall_beta_1.08.exe"
INSTALLER="$GPL_SETUP_HOME/gplinstall_beta_1.08.exe"
INSTALLER_MD5="dd5b2a23b224dcf553ff7bac9082b045  $INSTALLER"
INSTALLER_SHASUM="5223d8e8c577ec4504fc8c9491b03c61710af263  $INSTALLER"
GEM_URL="http://gem.grandprixlegends.info/GEM/GEMPackage_2.5.0.32.exe"
GEM="$GPL_SETUP_HOME/GEMPackage_2.5.0.32.exe"
GEM_MD5="d82cd2428ce28081a4dca6f3e395e95a  $GEM" 
GEM_SHASUM="e8ce456a6db5c2440cb0501accc553730e2ed321  $GEM"
WINEPREFIX="$GPL_HOME/pfx"
ISO_DEVICE="/dev/disk/by-label/GPL"

case $OSTYPE in
linux*)
    OS=linux
    # lsb_release -i -s -> Ubuntu # ID
    # lsb_release -r -s -> 20.04  # release
    ;;
darwin*)
    OS=osx
    ;;
*)
    echo "OS '$OSTYPE' not implemented.">&2
    exit 1
    ;;
esac

# check for wine
WINE="$(which wine)"
if [ ! -f "$WINE" ]; then
    echo "can't find wine, get wine on the \$PATH and try again" >&2
    exit 1
fi

# create targets
mkdir -p "$GPL_SETUP_HOME"
mkdir -p "$WINEPREFIX"
#
# args:
#   $1  'file'
#   $2  'url'
#
function dowload()
{
    if [ ! -f "$1" ]; then
        return $(wget $2 -O "$1") 
    fi
    return 0;
}
#
if ! dowload $ISO $ISO_URL \
|| ! dowload $INSTALLER $INSTALLER_URL \
|| ! dowload $GEM $GEM_URL; then
    echo "Download failed" 
    exit 1
fi

#
# Args:
#   $1  'file'
#   $2  'md5sum'
#   $3  'shasum'
#
function verify()
{
    local actual=""
    if [ ! -z "$(which shasum)" ]; then
        actual="$(shasum $1)"
        expected=$3
    elif   [ ! -z "$(which md5sum)" ]; then
        actual="$(md5sum $1)"
        expected=$2
    else
        echo "Can't verify $1" >&2
        return 1    
    fi
    if [ "$actual" != "$expected" ];then
        # echo "Expected $expected"
        # echo "Actual   $actual"
        echo "Bad hash: $(basename $1)" >&2
        return 1
    fi
    return 0
}
# Validate installer
if ! verify $ISO "$ISO_MD5" "$ISO_SHASUM" \
|| ! verify $INSTALLER "$INSTALLER_MD5" "$INSTALLER_SHASUM" \
|| ! verify $GEM "$GEM_MD5" "$GEM_SHASUM"; then
    echo verify failed
    exit 1
fi
#
function getMountpoint()
{
    r="\s+MountPoints:\s+(.*)"
    info=$(udisksctl info -b "$ISO_DEVICE" |grep MountPoints)
    if [[ "$info"  =~ $r ]] && [ -d "${BASH_REMATCH[1]}" ]; then
        echo "${BASH_REMATCH[1]}" 
    fi    
}
#
function getBackingFile()
{   
    local info=$(udisksctl info -b "$ISO_DEVICE" |grep BackingFile)
    local r="\s+BackingFile:\s+(.*)"
    if [[ "$info"  =~ $r  ]]; then
        echo "${BASH_REMATCH[1]}"
    fi
}
# 
# Unmount drive/iso
#
function unmountISO()
{
    udisksctl unmount -b $ISO_DEVICE
}
#
# TODO: return mountpoint
#
function mountISO()
{
    udisksctl loop-setup -f  $ISO 
    # Mapped file ~/.local/share/grand-prix-legends/setup/grand-prix-legends.iso as /dev/loop18.
}
# Mounting the iso 
if [[ $OS == "linux" ]]; then 
    if [ "$(file -b --mime-type "$ISO_DEVICE")" == "inode/symlink" ]; then 
        echo ISO already mounted?
    else
        echo Mounting ISO
        mountISO
    fi
    BACKINGFILE=$(getBackingFile) 
    if ! [ -f "$BACKINGFILE" ] || [ $BACKINGFILE != $ISO ]; then
        echo "wrong ISO mounted '$BACKINGFILE' ?" >&2
        exit 1
    fi
    MOUNT_POINT=$(getMountpoint) # unneeded
    if ! [ -d "$MOUNT_POINT" ]; then
        echo "wrong MountPoint '$MOUNT_POINT' is not Directory?" >&2
        exit 1
    fi
elif [[ $OS == "osx" ]]; then
    if ! hdiutil mount $ISO; then
        echo "TODO: Can't mount $(basename $ISO), it may be mounted already?" >&2
        exit 1
    fi
    echo "TODO: You may not find the CD on the Wine drive D: , sorry"
else
    echo "this shouldn't happen" >&2
    exit 1
fi

echo Launching installer

# wait for installer to complete
WINEPREFIX="$WINEPREFIX" wine "$INSTALLER" && unmountISO || unmountISO

# TODO: create create grand-prix-legends launch script
# TODO: create grand-prix-legends.desktop
# Display installation details 