#!/usr/bin/env bash
#
# Grand Prix Legends installer
# Works on:
#  - Ubuntu
#  - Maybe Debian/Ubuntu derivatives
#  - Partially on MACOS
# Tested on:
#  - Ubuntu 20.4
# Requires:
#  - bash
#  - wget
#  - wine
#  - md5sum|shasum
#  - udisksctl
#  - file
#  - grep
# Downloads:
#  - GrandPrixLegends.iso from archive.org
#  - gplinstall_beta_1.08.exe from  grandprixlegends.info
# Description:
#  - Creates wine prefix, mounts iso and runs the installer
#

# this script version
VERSION=0.0.1

GPL_HOME=~/.local/share/grand-prix-legends
GPL_SETUP_HOME="$GPL_HOME/setup"
ISO_URL="https://archive.org/download/grand-prix-legends/GrandPrixLegends.iso"
ISO=$GPL_SETUP_HOME/grand-prix-legends.iso
ISO_MD5="c42ff47a96633e28a6d03afa078b1da2  $ISO"
ISO_SHASUM="082542e01a9e63c914a8f34f77ee306531a2aa13  $ISO"
INSTALLER_URL="http://gem.grandprixlegends.info/gplinstall_beta_1.08.exe"
INSTALLER="$GPL_SETUP_HOME/gplinstall_beta_1.08.exe"
INSTALLER_MD5="dd5b2a23b224dcf553ff7bac9082b045  $INSTALLER"
INSTALLER_SHASUM="5223d8e8c577ec4504fc8c9491b03c61710af263  $INSTALLER"
GEM_URL="http://gem.grandprixlegends.info/GEM/GEMPackage_2.5.0.32.exe"
GEM="$GPL_SETUP_HOME/GEMPackage_2.5.0.32.exe"
GEM_MD5="d82cd2428ce28081a4dca6f3e395e95a  $GEM"
GEM_SHASUM="e8ce456a6db5c2440cb0501accc553730e2ed321  $GEM"
WINEPREFIX="$GPL_HOME/pfx"
ISO_DEVICE="/dev/disk/by-label/GPL"
#
ISO_BACKINGFILE=""
udisksctl_BackingFile() {
    local info=$(udisksctl info -b "$ISO_DEVICE" | grep BackingFile)
    local r="\s+BackingFile:\s+(.*)"
    if [[ "$info" =~ $r ]]; then
        ISO_BACKINGFILE="${BASH_REMATCH[1]}"
    else
        return 1
    fi
}
#
# udisksctl_mount
#
udisksctl_mount() {    
    if udisksctl_BackingFile \
    && [ -f "$ISO_BACKINGFILE" ] \
    && [ $ISO_BACKINGFILE == $ISO ]; then
        echo "ISO already mounted?" >&2
    else
        udisksctl loop-setup -f $ISO && udisksctl_BackingFile
        if [ ! -f "$ISO_BACKINGFILE" ] || [ $ISO_BACKINGFILE != $ISO ]; then
            echo "wrong ISO mounted '$ISO_BACKINGFILE' ?" >&2
            return 1
        fi
        echo "mounted $ISO"
        return 0
    fi
}
#
osx_mount() {
    if ! hdiutil mount $ISO; then
        echo "TODO: Can't mount $(basename $ISO), it may be mounted already?" >&2
        exit 1
    fi
    echo "TODO: You may not find the CD as a wine drive, sorry"
}

case $OSTYPE in
linux*)
    # mounting
    if ! udisksctl_mount; then
        echo exiting
        exit 1
    fi
    ;;
darwin*)
    if ! osx_mount ; then
        exit 1
    fi
    ;;
*)
    echo "Mounting ISO on OSTYPE=$OSTYPE is not implemented." >&2
    exit 1
    ;;
esac

read -p "any key to continue"

# unmount ISO
if [ -f "$ISO_BACKINGFILE" ] && [ $ISO_BACKINGFILE == $ISO ]; then
    case $OSTYPE in
    linux*)
        udisksctl unmount -b $ISO_DEVICE
        ;;
    *)
        # noop
        ;;
    esac
else
    echo "Not mounted: $ISO"
fi
